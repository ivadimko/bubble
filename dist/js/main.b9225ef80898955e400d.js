(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(e,n,t){"use strict";var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();t(7);var r=v(t(1)),o=v(t(2)),a=l(t(3)),c=l(t(4)),s=l(t(5));function l(e){return e&&e.__esModule?e:{default:e}}function v(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}var d=t(6)(r);new(function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=new r.Scene,this.renderer=new r.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerWidth),this.renderer.setClearColor(15658734,1),this.container=document.querySelector(n),this.container.appendChild(this.renderer.domElement),this.camera=new r.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.001,1e3);window.innerWidth,window.innerHeight;this.camera.position.set(0,0,1),this.camera.lookAt(0,0,0),this.controls=new d(this.camera,this.renderer.domElement),this.time=0,this.group=null,this.setupSettings(),this.setupResize(),this.resize(),this.addObjects(),this.animate()}return i(e,[{key:"setupSettings",value:function(){var e=this;this.settings={wireframe:!1,displacement:5,mFresnelBias:.1,mFresnelPower:2,mFresnelScale:1},this.gui=new o.GUI,this.gui.add(this.settings,"wireframe").onChange(function(n){e.material.wireframe=n}),this.gui.add(this.settings,"displacement",0,10).onChange(function(n){e.material.uniforms.uDisplacement.value=n})}},{key:"setupResize",value:function(){window.addEventListener("resize",this.resize.bind(this))}},{key:"resize",value:function(){var e=window.innerWidth,n=window.innerHeight;this.renderer.setSize(e,n),this.camera.aspect=e/n,this.camera.updateProjectionMatrix()}},{key:"render",value:function(){this.renderer.render(this.scene,this.camera)}},{key:"addObjects",value:function(){var e=[a.default,a.default,a.default,a.default,a.default,a.default];this.group=new r.Group,this.scene.add(this.group);var n=(new r.CubeTextureLoader).load(e);n.format=r.RGBFormat,this.scene.background=n;var t=new r.PointLight(128,.1);t.position.set(0,-.5,.5),this.group.add(t);var i=new r.PointLight(3750201,1);i.position.set(0,.5,0),this.group.add(i),this.material=new r.ShaderMaterial({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},uniforms:Object.assign({},r.UniformsLib.lights,{lightIntensity:{type:"f",value:1},textureSampler:{type:"t",value:null},uDisplacement:{type:"f",value:this.settings.displacement},uTime:{type:"f",value:0},mRefractionRatio:{value:1.02},mFresnelBias:{value:.1},mFresnelPower:{value:2},mFresnelScale:{value:1},tCube:{value:n}}),wireframe:this.settings.wireframe,transparent:!0,lights:!0,vertexShader:s.default,fragmentShader:c.default}),this.geometry=new r.SphereGeometry(.25,64,64),this.mesh=new r.Mesh(this.geometry,this.material),this.group.add(this.mesh)}},{key:"animate",value:function(){this.time+=.005,this.material.uniforms.uTime.value=this.time,this.group.quaternion.copy(this.camera.quaternion),requestAnimationFrame(this.animate.bind(this)),this.render()}}]),e}())("#container")},,,function(e,n,t){e.exports=t.p+"src/texture/test.jpg"},function(e,n){e.exports='precision highp float;\n\nvarying vec2 vUv;\nvarying vec3 vecPos;\nvarying vec3 vecNormal;\n\nuniform float lightIntensity;\nuniform sampler2D textureSampler;\n\nuniform samplerCube tCube;\n\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\n\nstruct PointLight {\n  vec3 color;\n  vec3 position; // light position, in camera coordinates\n  float distance; // used for attenuation purposes. Since\n                  // we\'re writing our own shader, it can\n                  // really be anything we want (as long as\n                  // we assign it to our light in its\n                  // "distance" field\n};\n\nuniform PointLight pointLights[NUM_POINT_LIGHTS];\n\nvoid main(void) {\n  // Pretty basic lambertian lighting...\n  vec4 addedLights = vec4(0.0,\n                          0.0,\n                          0.0,\n                          1.0);\n  for(int l = 0; l < NUM_POINT_LIGHTS; l++) {\n      vec3 lightDirection = normalize(vecPos\n                            - pointLights[l].position);\n      addedLights.rgb += clamp(dot(-lightDirection,\n                               vecNormal), 0.0, 1.0)\n                         * pointLights[l].color\n                         * lightIntensity;\n  }\n\n  vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n//  vec4 reflectedColor = vec4(0., 0., 0., 1.);\n  vec4 refractedColor = vec4( 1. );\n//\n  refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\n  refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\n  refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\n\n  gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n  gl_FragColor += addedLights;\n\n\n//  gl_FragColor = vec4(1., 1., 1., 1.)\n//                 * addedLights;\n}\n'},function(e,n){e.exports="varying vec2 vUv;\nvarying vec3 vecPos;\nvarying vec3 vecNormal;\nuniform float uTime;\nuniform float uDisplacement;\n\nuniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\n\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P);\n  vec3 Pi1 = Pi0 + vec3(1.0);\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P);\n  vec3 Pf1 = Pf0 - vec3(1.0);\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat perlin(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nvoid main() {\n  vUv = uv;\n  // Since the light is in camera coordinates,\n  // I'll need the vertex position in camera coords too\n  vec3 pos = position;\n\n  pos.x += (perlin(vec3(pos.y * uDisplacement + sin(uTime), sin(pos.z * uDisplacement + cos(uTime)), uTime)) - 0.5) * 0.2;\n  pos.y += (perlin(vec3(pos.x * uDisplacement + cos(uTime), sin(pos.y * uDisplacement + sin(uTime)), uTime)) - 0.5) * 0.2;\n  pos.z += (perlin(vec3(pos.z * uDisplacement + cos(uTime), sin(pos.x * uDisplacement + sin(uTime)), uTime)) - 0.5) * 0.2;\n\n\n  vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n\n  vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\n\n  vec3 I = worldPosition.xyz - cameraPosition;\n\n  vReflect = reflect( I, worldNormal );\n  vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\n  vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\n  vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\n  vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\n\n\n  vecPos = (modelViewMatrix * vec4(pos, 1.0)).xyz;\n  // That's NOT exacly how you should transform your\n  // normals but this will work fine, since my model\n  // matrix is pretty basic\n  vecNormal = (modelViewMatrix * vec4(normal, 0.0)).xyz;\n\n\n  gl_Position = projectionMatrix *\n                vec4(vecPos, 1.0);\n}\n"},,function(e,n){}],[[0,1,2]]]);